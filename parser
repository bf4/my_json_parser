#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 32)

require "strscan"

def next_token
  c = @ss.getch

  c ? [c, c] : nil
end

def parse(text)
  @ss = StringScanner.new(text)

  do_parse
end

...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     6,     5,     6,    10,     7,    11,    12 ]

racc_action_check = [
     0,     0,     2,     2,     5,     1,     7,    10 ]

racc_action_pointer = [
    -2,     5,     0,   nil,   nil,     0,   nil,     6,   nil,   nil,
     3,   nil,   nil ]

racc_action_default = [
    -1,    -9,    -9,    -3,    -5,    -6,    -7,    -9,    -2,    -4,
    -9,    13,    -8 ]

racc_goto_table = [
     4,     3,     9,     8,     2,     1 ]

racc_goto_check = [
     4,     3,     4,     3,     2,     1 ]

racc_goto_pointer = [
   nil,     5,     4,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 6, :_reduce_none,
  2, 6, :_reduce_none,
  1, 6, :_reduce_none,
  2, 7, :_reduce_none,
  1, 7, :_reduce_none,
  1, 9, :_reduce_none,
  1, 9, :_reduce_none,
  3, 8, :_reduce_8 ]

racc_reduce_n = 9

racc_shift_n = 13

racc_token_table = {
  false => 0,
  :error => 1,
  "a" => 2,
  "c" => 3,
  "b" => 4 }

racc_nt_base = 5

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"a\"",
  "\"c\"",
  "\"b\"",
  "$start",
  "string",
  "a_or_cs",
  "abb",
  "a_or_c" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_8(val, _values, result)
     puts "I found abb!" 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

parser = Parser.new

# raises Racc::ParseError on failed match
parser.parse(ARGV[0]) 
